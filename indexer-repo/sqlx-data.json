{
  "db": "PostgreSQL",
  "0c0e37358d5f20fa55e7b11a86372f5c1c9c623c3f325f7b8a38b0b7cb76aec5": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "VarcharArray",
          "TimestampArray",
          "TimestampArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "create",
                        "await_nft",
                        "active",
                        "filled",
                        "cancelled",
                        "expired"
                      ]
                    },
                    "name": "direct_sell_state"
                  }
                }
              },
              "name": "_direct_sell_state"
            }
          },
          "TimestampArray",
          "TimestampArray",
          "Int8Array"
        ]
      }
    },
    "query": "\n            insert into nft_direct_sell(\n                address,\n                root,\n                nft, \n                price_token, \n                price, \n                seller,\n                finished_at,\n                expired_at,\n                state,\n                created,\n                updated,\n                tx_lt\n            )\n            select * from unnest(\n                $1::varchar[], \n                $2::varchar[],\n                $3::varchar[], \n                $4::varchar[], \n                $5::numeric[],\n                $6::varchar[],\n                $7::timestamp[],\n                $8::timestamp[],\n                $9::direct_sell_state[],\n                $10::timestamp[],\n                $11::timestamp[],\n                $12::bigint[]\n            ) \n            on conflict(address) do nothing\n        "
  },
  "1068960c3648fcc7976b1db18efa700c069bb3e54ee1a50631221f3dbb51d9ec": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Varchar",
          "Text"
        ]
      }
    },
    "query": "\n                update nft\n                set name = $1\n                where address = $2\n            "
  },
  "18ebdcb5f9674c7b0a6bf99a5f42978a53dae62cd6aafed3f88c99f4d5c218f5": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Numeric",
          "Text"
        ]
      }
    },
    "query": "\n                update nft_auction\n                set closing_price_usd = $1\n                where address = $2\n            "
  },
  "1a8faf43e1567afeb374cc2c1d077d508b2b6df8cc0c30e59255d70c3f9ed835": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Int8"
        ]
      }
    },
    "query": "\n        select address\n        from nft_collection\n        order by updated desc\n        limit $1\n        "
  },
  "23dde169ba4c8c92dd329f563239e0d5cf62f4681814561c9b8da8da983e0800": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "NumericArray",
          "NumericArray",
          "Int8Array"
        ]
      }
    },
    "query": "\n        update nft_auction set\n            min_bid = data.min_bid,\n            max_bid = data.max_bid,\n            tx_lt = data.tx_lt\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::numeric[]) as min_bid,\n                unnest($3::numeric[]) as max_bid,\n                unnest($4::bigint[]) as tx_lt\n        ) as data\n        where nft_auction.address = data.address\n    "
  },
  "26a933a554da5ddb6363466dab92a0f5fd54779903c2869a6370adb4983fd233": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "token_addr!",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "token_amount!",
          "ordinal": 2,
          "type_info": "Numeric"
        },
        {
          "name": "created_at!",
          "ordinal": 3,
          "type_info": "Timestamp"
        }
      ],
      "nullable": [
        false,
        true,
        true,
        true
      ],
      "parameters": {
        "Left": [
          "Timestamp",
          "Timestamp",
          "Int8"
        ]
      }
    },
    "query": "\n                select \n                    address as id,\n                    price_token as \"token_addr!\",\n                    min_bid as \"token_amount!\",\n                    created_at as \"created_at!\"\n                from nft_auction\n                where closing_price_usd is null\n                and created_at is not null\n                and min_bid is not null\n                and price_token is not null\n                and created_at <= $1\n                and created_at != $2 \n                and status = 'completed'\n                limit $3\n            "
  },
  "2af0ca6079fae6e23a8a33c8ff3ba2fbcac7398f445d9860e10d142ee4debaf4": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text",
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          "Text",
          "Text",
          "Varchar",
          "Varchar",
          "Timestamp"
        ]
      }
    },
    "query": "\n        update nft_collection\n        set \n            owner        = $2, \n            name         = coalesce($3, nft_collection.name),\n            description  = coalesce($4, nft_collection.description),\n            logo         = coalesce($5, nft_collection.logo),\n            wallpaper    = coalesce($6, nft_collection.wallpaper),\n            updated      = greatest($7, nft_collection.updated)\n        where address = $1\n        "
  },
  "42b3e8687219dcffe6d1e8d8d3aa1d80560628e87517c2a7d786da80f0a3f414": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "auction",
                        "direct_buy",
                        "direct_sell",
                        "nft",
                        "collection",
                        "common"
                      ]
                    },
                    "name": "event_category"
                  }
                }
              },
              "name": "_event_category"
            }
          },
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "auction_deployed",
                        "auction_created",
                        "auction_root_ownership_transferred",
                        "auction_active",
                        "auction_declined",
                        "auction_bid_placed",
                        "auction_bid_declined",
                        "auction_cancelled",
                        "auction_complete",
                        "direct_buy_deployed",
                        "direct_buy_declined",
                        "factory_direct_buy_ownership_transferred",
                        "direct_buy_state_changed",
                        "direct_sell_deployed",
                        "direct_sell_declined",
                        "factory_direct_sell_ownership_transferred",
                        "direct_sell_state_changed",
                        "nft_owner_changed",
                        "nft_manager_changed",
                        "collection_ownership_transferred",
                        "nft_created",
                        "nft_burned",
                        "market_fee_default_changed",
                        "market_fee_changed",
                        "add_collection_rules",
                        "remove_collection_rules",
                        "ownership_transferred"
                      ]
                    },
                    "name": "event_type"
                  }
                }
              },
              "name": "_event_type"
            }
          },
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "Int8Array",
          "Int8Array",
          "JsonbArray",
          "TextArray"
        ]
      }
    },
    "query": "\n            insert into nft_events (\n                event_cat,  \n                event_type, \n                address, \n                nft,\n                collection, \n                created_lt,\n                created_at, \n                args, \n                message_hash\n            )\n\n            select * \n            from unnest(\n                $1::event_category[], \n                $2::event_type[], \n                $3::varchar[], \n                $4::varchar[], \n                $5::varchar[],\n                $6::bigint[], \n                $7::bigint[],\n                $8::jsonb[],\n                $9::text[]\n            )\n            on conflict(message_hash) do nothing\n        "
  },
  "5a254f39cdadfa8c4af29faaf92e64800cb9320c690bb4ac6407cd15592bd472": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Numeric",
          "Text"
        ]
      }
    },
    "query": "\n                update nft_direct_buy\n                set buy_price_usd = $1\n                where address = $2\n            "
  },
  "5e51b09eb38779001303cf4a7bd8e19970f8741eef32844e802cbed56ba5cd6d": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "Int4Array",
          "Int4Array",
          "TimestampArray"
        ]
      }
    },
    "query": "\n        update nft_collection set\n            fee_numerator   = data.num, \n            fee_denominator = data.den,\n            updated         = greatest(data.ts, nft_collection.updated)\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::integer[]) as num,\n                unnest($3::integer[]) as den,\n                unnest($4::timestamp[]) as ts\n        ) as data\n        where nft_collection.address = data.address\n    "
  },
  "5f619b22c878e3bb0288ce9aa8ddae142b8d0d2e68580bbf4e3992d7bd8c6c07": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        ]
      }
    },
    "query": "\n        update nft_auction set\n            status = data.status\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                $2::auction_status as status\n        ) as data\n        where nft_auction.address = data.address\n    "
  },
  "6608660ee3e71c3cb60a8054bc18cecdb23c57c4601ee4353a472145ce16b425": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "create",
                        "await_tokens",
                        "active",
                        "filled",
                        "cancelled",
                        "expired"
                      ]
                    },
                    "name": "direct_buy_state"
                  }
                }
              },
              "name": "_direct_buy_state"
            }
          },
          "TimestampArray",
          "TimestampArray",
          "Int8Array"
        ]
      }
    },
    "query": "\n        update nft_direct_buy set\n            state = data.state,\n            finished_at = data.finished_at,\n            updated = data.updated,\n            tx_lt = data.tx_lt\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::direct_buy_state[]) as state,\n                unnest($3::timestamp[]) as finished_at,\n                unnest($4::timestamp[]) as updated,\n                unnest($5::bigint[]) as tx_lt\n        ) as data\n        where nft_direct_buy.address = data.address\n        "
  },
  "676b63e324692022136dcd92309945b4fde8954170758d46b0898c50343399a5": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "TimestampArray"
        ]
      }
    },
    "query": "\n            insert into nft_collection(address, first_mint, created, updated)\n            select * from unnest(\n                $1::varchar[], \n                $2::timestamp[], \n                $2::timestamp[], \n                $2::timestamp[]) \n            on conflict(address) do nothing\n        "
  },
  "6f0fa608f7d0b847580fae9efb25389e76c11f42489f5220447c4caa845430a5": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Varchar",
          "Text",
          "Text"
        ]
      }
    },
    "query": "\n                update nft\n                set name = $1,\n                    description = $2\n                where address = $3\n            "
  },
  "735e0a811723e09c9a25be89683cce5b9de9f0463a33ab6760675277318235c9": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "auctionBid",
                        "directBuy",
                        "directSell"
                      ]
                    },
                    "name": "nft_price_source"
                  }
                }
              },
              "name": "_nft_price_source"
            }
          },
          "TimestampArray",
          "NumericArray",
          "VarcharArray",
          "VarcharArray"
        ]
      }
    },
    "query": "\n            insert into nft_price_history (\n                source, \n                source_type, \n                ts, \n                price,\n                price_token, \n                nft\n            )\n            select *\n            from unnest(\n                $1::varchar[],\n                $2::nft_price_source[],\n                $3::timestamp[],\n                $4::numeric[],\n                $5::varchar[],\n                $6::varchar[]\n            ) \n        "
  },
  "774439e45ec6b7d5827c0d03f330ffb6af0f5c13dcd0fe53156a8a18215d922f": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "token_addr",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "token_amount",
          "ordinal": 2,
          "type_info": "Numeric"
        },
        {
          "name": "created_at",
          "ordinal": 3,
          "type_info": "Timestamp"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Timestamp",
          "Timestamp",
          "Int8"
        ]
      }
    },
    "query": "\n                select \n                    address as id,\n                    price_token as token_addr,\n                    price as token_amount,\n                    created as created_at\n                from nft_direct_buy\n                where buy_price_usd is null\n                and created <= $1\n                and created != $2 \n                and state = 'filled'\n                limit $3\n            "
  },
  "7d4403637b37255b2c03f7f57458c91759aa006ae110b7dfebd499dd5ca41f4f": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Numeric",
          "Text"
        ]
      }
    },
    "query": "\n                update nft_direct_sell\n                set sell_price_usd = $1\n                where address = $2\n            "
  },
  "7e472afe355546a6d46d3be1bbdfc9f315900db226607804aa4a71b60af874f3": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "NumericArray",
          "TimestampArray",
          "Int8Array",
          "BoolArray"
        ]
      }
    },
    "query": "\n            insert into nft_auction_bid (\n                auction,\n                buyer,\n                price,\n                next_bid_value, \n                created_at,\n                tx_lt,\n                declined\n            )\n            select *\n            from unnest(\n                $1::varchar[],\n                $2::varchar[],\n                $3::numeric[],\n                $4::numeric[],\n                $5::timestamp[],\n                $6::bigint[],\n                $7::boolean[]\n            ) \n        "
  },
  "87b2eaf1fcab8ab6d09ccc1f15b9c4feb19f1a8b109ba65357cf4c7f229894cd": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "create",
                        "await_nft",
                        "active",
                        "filled",
                        "cancelled",
                        "expired"
                      ]
                    },
                    "name": "direct_sell_state"
                  }
                }
              },
              "name": "_direct_sell_state"
            }
          },
          "TimestampArray",
          "TimestampArray",
          "Int8Array"
        ]
      }
    },
    "query": "\n        update nft_direct_sell set\n            state = data.state,\n            finished_at = data.finished_at,\n            updated = data.updated,\n            tx_lt = data.tx_lt\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::direct_sell_state[]) as state,\n                unnest($3::timestamp[]) as finished_at,\n                unnest($4::timestamp[]) as updated,\n                unnest($5::bigint[]) as tx_lt\n        ) as data\n        where nft_direct_sell.address = data.address\n        "
  },
  "8a642dcdfc996e0f497d5f513de2c10b51dab1884214351ab467e9f09979e531": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          "Jsonb",
          "Timestamp"
        ]
      }
    },
    "query": "\n                insert into nft_metadata (nft, meta, updated)\n                values ($1, $2, $3)\n                on conflict (nft) where updated < $3 do update\n                set meta = coalesce($2, nft_metadata.meta), updated = $3\n            "
  },
  "984cc7e745ba8a2d7f1df1f9e2589deece00cb9d6708f210f0f4bca20dc2dd14": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "NumericArray",
          "TimestampArray",
          "TimestampArray",
          "Int8Array",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "created",
                        "active",
                        "cancelled",
                        "completed",
                        "expired"
                      ]
                    },
                    "name": "auction_status"
                  }
                }
              },
              "name": "_auction_status"
            }
          }
        ]
      }
    },
    "query": "\n        update nft_auction set\n            wallet_for_bids = data.wallet,\n            price_token = data.price_token,\n            start_price = data.start_price,\n            min_bid = data.min_bid,\n            created_at = data.created,\n            finished_at = data.finished,\n            tx_lt = data.tx_lt,\n            status = data.status\n        from (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::varchar[]) as wallet,\n                unnest($3::varchar[]) as price_token,\n                unnest($4::numeric[]) as start_price,\n                unnest($5::numeric[]) as min_bid,\n                unnest($6::timestamp[]) as created, \n                unnest($7::timestamp[]) as finished,\n                unnest($8::bigint[]) as tx_lt,\n                unnest($9::auction_status[]) as status\n        ) as data\n        where nft_auction.address = data.address\n        "
  },
  "9e785ebcd70336f018a5c52a32816eb3c26a5dc439344d691ef9cdcef0584381": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "TimestampArray"
        ]
      }
    },
    "query": "\n        update nft set\n            owner = data.owner,\n            updated = data.time\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::varchar[]) as owner,\n                unnest($3::timestamp[]) as time\n        ) as data\n        where nft.address = data.address\n    "
  },
  "a63f6b24109de4c54c79dad5c21e949db925166589ade5dbd6892b5b30f79030": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "VarcharArray",
          "TimestampArray",
          "TimestampArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "create",
                        "await_tokens",
                        "active",
                        "filled",
                        "cancelled",
                        "expired"
                      ]
                    },
                    "name": "direct_buy_state"
                  }
                }
              },
              "name": "_direct_buy_state"
            }
          },
          "TimestampArray",
          "TimestampArray",
          "Int8Array"
        ]
      }
    },
    "query": "\n            insert into nft_direct_buy(\n                address,\n                root,\n                nft, \n                price_token, \n                price, \n                buyer,\n                finished_at,\n                expired_at,\n                state,\n                created,\n                updated,\n                tx_lt\n            )\n            select * from unnest(\n                $1::varchar[],\n                $2::varchar[],\n                $3::varchar[], \n                $4::varchar[], \n                $5::numeric[],\n                $6::varchar[],\n                $7::timestamp[],\n                $8::timestamp[],\n                $9::direct_buy_state[],\n                $10::timestamp[],\n                $11::timestamp[],\n                $12::bigint[]\n            ) \n            on conflict(address) do nothing\n        "
  },
  "a67d814a4385ec4491085a66462c167d4904413f5eff84e3e06ce094527cb552": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            select address \n            from nft \n            where collection = $1\n            "
  },
  "a76e7676bc83e0d7ce7a25db1772552bd60eb7376fd761ed748dc622046d2748": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray"
        ]
      }
    },
    "query": "\n        update nft set\n            burned = true,\n            owner = data.owner,\n            manager = data.manager\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::varchar[]) as owner,\n                unnest($3::varchar[]) as manager\n        ) as data\n        where nft.address = data.address\n    "
  },
  "aaf93547db178572807ccc14aa43553f65b9509c3238b9412d5e68b404f91c7d": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          "Jsonb",
          "Varchar",
          "Jsonb"
        ]
      }
    },
    "query": "\n                    insert into nft_attributes (nft, collection, raw, trait_type, value)\n                    values ($1, $2, $3, $4, $5)\n                "
  },
  "ac2aa6372528c6b605d90e6d1f9f56e22a6bd62c3f66770f45f3926ede759756": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          "Int8",
          "Bool"
        ]
      }
    },
    "query": "\n                insert into meta_handled_addresses (\n                    address, \n                    updated_at,\n                    failed\n                )\n                values (\n                    $1, \n                    $2,\n                    $3\n                )\n                on conflict (address) do update \n                set\n                    updated_at = $2,\n                    failed = $3\n            "
  },
  "b26379153f56804b980c102af4afc542ec8aeda91a7e11918c72a7690b4a67f5": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "NumericArray",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        ]
      }
    },
    "query": "\n        update nft_auction set\n            max_bid = data.max_bid,\n            status = data.status\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::numeric[]) as max_bid,\n                $3::auction_status as status\n        ) as data\n        where nft_auction.address = data.address\n    "
  },
  "c5e889b0b72d1c6b660997a023dd073cffd4f8dd68d29eaabaeb68d81c59600d": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "Int8Array",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "created",
                        "active",
                        "cancelled",
                        "completed",
                        "expired"
                      ]
                    },
                    "name": "auction_status"
                  }
                }
              },
              "name": "_auction_status"
            }
          }
        ]
      }
    },
    "query": "\n        insert into nft_auction (\n            address, \n            root,\n            nft,\n            tx_lt,\n            status\n        )\n        select *\n        from unnest(\n            $1::varchar[],\n            $2::varchar[],\n            $3::varchar[],\n            $4::bigint[],\n            $5::auction_status[]\n        ) \n        on conflict(address) do nothing\n        "
  },
  "d0b2e695b98ac8d6a2ab63d6297cc530cd2c91e8ca9b323ee8a880c0ca595a60": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Int8",
          "Numeric"
        ]
      }
    },
    "query": "\n                select c.address\n                from nft_collection c\n                left join meta_handled_addresses mha on mha.address = c.address\n                where \n                    (mha.address is null) or\n                    (extract(epoch from now()) - mha.updated_at > $2 and failed is true)\n                limit $1\n                "
  },
  "d217cc75431bc07f6d73cc321622078a260f0d1d330a2b244f07f2802708e486": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text",
          "Text"
        ]
      }
    },
    "query": "\n                update nft\n                set description = $1\n                where address = $2\n            "
  },
  "eea4dd6ea15b71a4325cf0a7ffd2d5f0f5b76c30bbd43efc3833294e178d9850": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "TimestampArray",
          "Int8Array",
          "Int8Array"
        ]
      }
    },
    "query": "\n            insert into nft(address, collection, owner, manager, updated, owner_update_lt, manager_update_lt)\n            select * from unnest(\n                $1::varchar[], \n                $2::varchar[], \n                $3::varchar[], \n                $4::varchar[], \n                $5::timestamp[],\n                $6::bigint[], \n                $7::bigint[]) \n            on conflict(address) do nothing\n        "
  },
  "f5d588a0d28c4e9446b5ca4d7ea99ec0ad88afb1d7f48e71be86457eb9f9329a": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "is_l2r",
          "ordinal": 1,
          "type_info": "Bool"
        },
        {
          "name": "decimals",
          "ordinal": 2,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "everscale",
                  "venom"
                ]
              },
              "name": "bc_name"
            }
          }
        ]
      }
    },
    "query": "\n                select \n                    pair as address,\n                    is_l2r,\n                    decimals\n                from token_to_dex\n                where token = $1 and source = $2\n            "
  },
  "fc19916b9a9ca377455e1b9746fdfca4af4359ca9fb2a3029edfedcfb771ac67": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "token_addr",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "token_amount",
          "ordinal": 2,
          "type_info": "Numeric"
        },
        {
          "name": "created_at",
          "ordinal": 3,
          "type_info": "Timestamp"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Timestamp",
          "Timestamp",
          "Int8"
        ]
      }
    },
    "query": "\n                select \n                    address as id,\n                    price_token as token_addr,\n                    price as token_amount,\n                    created as created_at\n                from nft_direct_sell\n                where sell_price_usd is null\n                and created <= $1\n                and created != $2 \n                and state = 'filled'\n                limit $3\n            "
  },
  "fe0ac4841f4e933baa51d587ed2e0bb53cd9273df0fb9cbc26a6be9681bfd751": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "collection",
          "ordinal": 1,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false,
        true
      ],
      "parameters": {
        "Left": [
          "Int8",
          "Numeric"
        ]
      }
    },
    "query": "\n                select \n                    n.address,\n                    n.collection\n                from nft n\n                left join meta_handled_addresses mha on mha.address = n.address\n                where \n                    (mha.address is null) or\n                    (extract(epoch from now()) - mha.updated_at > $2 and failed is true)\n                limit $1\n            "
  },
  "fe6605371497cf9f59c6633361e1214b02d7eaa876274bdae69495cecaf96215": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "TimestampArray"
        ]
      }
    },
    "query": "\n        update nft set\n            manager = data.manager,\n            updated = data.time\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::varchar[]) as manager,\n                unnest($3::timestamp[]) as time\n        ) as data\n        where nft.address = data.address\n    "
  }
}