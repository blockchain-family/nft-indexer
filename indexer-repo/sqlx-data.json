{
  "db": "PostgreSQL",
  "10b0276dd2b01b11d05ba27c8bba4976864d0ad1e6813079c7468bfe29843921": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": []
      }
    },
    "query": "call update_all_collections()"
  },
  "14044f4dc2858bb70b9857f42b5ff9290e93358dab29b05d5c8cb77c8346a311": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "VarcharArray",
          "TimestampArray",
          "TimestampArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "create",
                        "await_nft",
                        "active",
                        "filled",
                        "cancelled",
                        "expired"
                      ]
                    },
                    "name": "direct_sell_state"
                  }
                }
              },
              "name": "_direct_sell_state"
            }
          },
          "TimestampArray",
          "TimestampArray",
          "Int8Array"
        ]
      }
    },
    "query": "\n            insert into nft_direct_sell(\n                address,\n                root,\n                nft, \n                collection,\n                price_token, \n                price, \n                seller,\n                finished_at,\n                expired_at,\n                state,\n                created,\n                updated,\n                tx_lt\n            )\n            select\n                unnest($1::varchar[]), \n                unnest($2::varchar[]),\n                unnest($3::varchar[]), \n                unnest($4::varchar[]),\n                unnest($5::varchar[]), \n                unnest($6::numeric[]),\n                unnest($7::varchar[]),\n                unnest($8::timestamp[]),\n                unnest($9::timestamp[]),\n                unnest($10::direct_sell_state[]),\n                unnest($11::timestamp[]),\n                unnest($12::timestamp[]),\n                unnest($13::bigint[])\n            on conflict(address) do nothing\n        "
  },
  "1a8faf43e1567afeb374cc2c1d077d508b2b6df8cc0c30e59255d70c3f9ed835": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Int8"
        ]
      }
    },
    "query": "\n        select address\n        from nft_collection\n        order by updated desc\n        limit $1\n        "
  },
  "23dde169ba4c8c92dd329f563239e0d5cf62f4681814561c9b8da8da983e0800": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "NumericArray",
          "NumericArray",
          "Int8Array"
        ]
      }
    },
    "query": "\n        update nft_auction set\n            min_bid = data.min_bid,\n            max_bid = data.max_bid,\n            tx_lt = data.tx_lt\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::numeric[]) as min_bid,\n                unnest($3::numeric[]) as max_bid,\n                unnest($4::bigint[]) as tx_lt\n        ) as data\n        where nft_auction.address = data.address\n    "
  },
  "3181b63aefc5454f2be1164880600cf564f906cf9ca43d220aecc81d49471f7b": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "auctionBid",
                        "directBuy",
                        "directSell"
                      ]
                    },
                    "name": "nft_price_source"
                  }
                }
              },
              "name": "_nft_price_source"
            }
          },
          "TimestampArray",
          "NumericArray",
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "VarcharArray"
        ]
      }
    },
    "query": "\n            insert into nft_price_history (\n                source, \n                source_type, \n                ts, \n                price,\n                price_token, \n                nft,\n                usd_price,\n                collection\n            )\n            select\n                unnest($1::varchar[]),\n                unnest($2::nft_price_source[]),\n                unnest($3::timestamp[]),\n                unnest($4::numeric[]),\n                unnest($5::varchar[]),\n                unnest($6::varchar[]),\n                unnest($7::numeric[]),\n                unnest($8::varchar[])\n        "
  },
  "3a1d58904ce016d5730a2c579b9ecf2322b0e61d3688d4514abc036695221292": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            select address\n            from nft\n            where collection = $1\n            "
  },
  "3d7908795676eb7e2896022697ba0457668b2a0502905a5f66baed44da26f9ee": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text",
          "Text",
          "Text",
          "Varchar",
          "Varchar",
          "Timestamp",
          "Varchar",
          "Jsonb"
        ]
      }
    },
    "query": "\n            update nft_collection\n            set\n                name         = coalesce($2, nft_collection.name),\n                description  = coalesce($3, nft_collection.description),\n                logo         = coalesce($4, nft_collection.logo),\n                wallpaper    = coalesce($5, nft_collection.wallpaper),\n                updated      = greatest($6, nft_collection.updated),\n                owner        = coalesce($7, nft_collection.owner),\n                royalty      = coalesce($8, nft_collection.royalty)\n            where address = $1\n            "
  },
  "3da1a3c00024408bbdc7bac09b48570170d758818e789dca67541a0663088924": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "Int8Array",
          "VarcharArray",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        ]
      }
    },
    "query": "\n        insert into nft_auction (\n            address, \n            root,\n            nft,\n            collection,\n            tx_lt,\n            nft_owner,\n            status\n        )\n        select \n            unnest($1::varchar[]),\n            unnest($2::varchar[]),\n            unnest($3::varchar[]),\n            unnest($4::varchar[]),\n            unnest($5::bigint[]),\n            unnest($6::varchar[]),\n            $7::auction_status\n        on conflict(address) do nothing\n        "
  },
  "4737bab7485f07b8a3c3bfd6973d1b484d64dcbe16a5364260a13c2645bde3ab": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Varchar",
          "Text",
          "Text"
        ]
      }
    },
    "query": "\n                update nft\n                set name = $1,\n                    description = $2,\n                    metadata_updated_at = extract(epoch from now())\n                where address = $3\n            "
  },
  "4b5b5898e4e10255844d4041476872f92e0d50a0620960eaf4d748823b39e32e": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Int8",
          "Numeric"
        ]
      }
    },
    "query": "\n                select c.address\n                from nft_collection c\n                left join meta_handled_addresses mha on mha.address = c.address\n                where\n                    /*c.verified and*/\n                    (mha.address is null)\n                    or (mha.updated_at < (extract(epoch from now()) - $2)::bigint and failed)\n                order by updated desc\n                limit $1\n                "
  },
  "5135b708c23f27ddb65c58152b371a2a60d853fab5bac7e466f97c413a49306b": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          "Jsonb",
          "Varchar",
          "Jsonb",
          "Timestamp"
        ]
      }
    },
    "query": "\n                    insert into nft_attributes (nft, collection, raw, trait_type, value, updated)\n                    values ($1, $2, $3, $4, $5, $6)\n                    on conflict (nft, trait_type) where updated < $6 do update\n                    set raw = excluded.raw, value = excluded.value, updated = excluded.updated;\n                "
  },
  "52b1d58d04ad88f604ad3ca173a796ff6d3087b137f1cf2379fe307692b0c6d7": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "TimestampArray"
        ]
      }
    },
    "query": "\n            insert into deployed_offers (\n                address,\n                root,\n                created\n            )\n            select\n                unnest($1::varchar[]),\n                unnest($2::varchar[]),\n                unnest($3::timestamp[])\n            on conflict (address) do nothing\n        "
  },
  "5e51b09eb38779001303cf4a7bd8e19970f8741eef32844e802cbed56ba5cd6d": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "Int4Array",
          "Int4Array",
          "TimestampArray"
        ]
      }
    },
    "query": "\n        update nft_collection set\n            fee_numerator   = data.num, \n            fee_denominator = data.den,\n            updated         = greatest(data.ts, nft_collection.updated)\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::integer[]) as num,\n                unnest($3::integer[]) as den,\n                unnest($4::timestamp[]) as ts\n        ) as data\n        where nft_collection.address = data.address\n    "
  },
  "5f619b22c878e3bb0288ce9aa8ddae142b8d0d2e68580bbf4e3992d7bd8c6c07": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        ]
      }
    },
    "query": "\n        update nft_auction set\n            status = data.status\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                $2::auction_status as status\n        ) as data\n        where nft_auction.address = data.address\n    "
  },
  "6541c04d83e3b45927d0472100e752550a10b667fddf4ff6e8cdbb92348daa11": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "VarcharArray",
          "TimestampArray",
          "TimestampArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "create",
                        "await_tokens",
                        "active",
                        "filled",
                        "cancelled",
                        "expired"
                      ]
                    },
                    "name": "direct_buy_state"
                  }
                }
              },
              "name": "_direct_buy_state"
            }
          },
          "TimestampArray",
          "TimestampArray",
          "Int8Array"
        ]
      }
    },
    "query": "\n            insert into nft_direct_buy(\n                address,\n                root,\n                nft,\n                collection,\n                price_token, \n                price, \n                buyer,\n                finished_at,\n                expired_at,\n                state,\n                created,\n                updated,\n                tx_lt\n            )\n            select\n                unnest($1::varchar[]),\n                unnest($2::varchar[]),\n                unnest($3::varchar[]), \n                unnest($4::varchar[]),\n                unnest($5::varchar[]), \n                unnest($6::numeric[]),\n                unnest($7::varchar[]),\n                unnest($8::timestamp[]),\n                unnest($9::timestamp[]),\n                unnest($10::direct_buy_state[]),\n                unnest($11::timestamp[]),\n                unnest($12::timestamp[]),\n                unnest($13::bigint[])\n            on conflict(address) do nothing\n        "
  },
  "6b17cf5470cca4d82bd7d2f3487019dbdced8cd8df9226934fd6c85fe9ce124b": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "collection",
          "ordinal": 1,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Int8",
          "Numeric"
        ]
      }
    },
    "query": "\n            select n.address, n.collection\n            from nft n\n                     join nft_collection nc on nc.address = n.collection\n                     left join meta_handled_addresses mha on mha.address = n.address\n            where (n.metadata_updated_at is null and mha.address is null)\n               or (mha.updated_at < (extract(epoch from now()) - $2)::bigint and failed and n.metadata_updated_at is null)\n            order by nc.verified desc\n            limit $1\n            "
  },
  "727ae64851bbfa9c79ce7c939638a19483b8a2a3b2f8f50c5fc2b5135753ba18": {
    "describe": {
      "columns": [
        {
          "name": "token",
          "ordinal": 0,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "everscale",
                  "venom"
                ]
              },
              "name": "bc_name"
            }
          }
        ]
      }
    },
    "query": "\n                select token\n                from token_to_dex\n                where source = $1\n            "
  },
  "861d9c3757649d8f7d18e08fcfb77d3bfd31f92639ba779d8f8d7fdcacdc9e03": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "auction",
                        "direct_buy",
                        "direct_sell",
                        "nft",
                        "collection",
                        "common"
                      ]
                    },
                    "name": "event_category"
                  }
                }
              },
              "name": "_event_category"
            }
          },
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "auction_deployed",
                        "auction_created",
                        "auction_root_ownership_transferred",
                        "auction_active",
                        "auction_declined",
                        "auction_bid_placed",
                        "auction_bid_declined",
                        "auction_cancelled",
                        "auction_complete",
                        "direct_buy_deployed",
                        "direct_buy_declined",
                        "factory_direct_buy_ownership_transferred",
                        "direct_buy_state_changed",
                        "direct_sell_deployed",
                        "direct_sell_declined",
                        "factory_direct_sell_ownership_transferred",
                        "direct_sell_state_changed",
                        "nft_owner_changed",
                        "nft_manager_changed",
                        "collection_ownership_transferred",
                        "nft_created",
                        "nft_burned",
                        "market_fee_default_changed",
                        "market_fee_changed",
                        "add_collection_rules",
                        "remove_collection_rules",
                        "ownership_transferred"
                      ]
                    },
                    "name": "event_type"
                  }
                }
              },
              "name": "_event_type"
            }
          },
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "Int8Array",
          "Int8Array",
          "JsonbArray",
          "TextArray"
        ]
      }
    },
    "query": "\n            insert into nft_events (\n                event_cat,  \n                event_type, \n                address, \n                nft,\n                collection, \n                created_lt,\n                created_at, \n                args, \n                message_hash\n            )\n            select \n                unnest($1::event_category[]),\n                unnest($2::event_type[]), \n                unnest($3::varchar[]), \n                unnest($4::varchar[]), \n                unnest($5::varchar[]),\n                unnest($6::bigint[]), \n                unnest($7::bigint[]),\n                unnest($8::jsonb[]),\n                unnest($9::text[])\n            on conflict(message_hash) do nothing\n        "
  },
  "8a642dcdfc996e0f497d5f513de2c10b51dab1884214351ab467e9f09979e531": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          "Jsonb",
          "Timestamp"
        ]
      }
    },
    "query": "\n                insert into nft_metadata (nft, meta, updated)\n                values ($1, $2, $3)\n                on conflict (nft) where updated < $3 do update\n                set meta = coalesce($2, nft_metadata.meta), updated = $3\n            "
  },
  "8b5cad7aecc93fc1f3c1f72160858398e26687861db3a482ab4c1881ad22da9c": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          "Int8",
          "Bool"
        ]
      }
    },
    "query": "\n                insert into meta_handled_addresses (\n                    address,\n                    updated_at,\n                    failed\n                )\n                values (\n                    $1,\n                    $2,\n                    $3\n                )\n                on conflict (address) do update\n                set\n                    updated_at = $2,\n                    failed = $3\n            "
  },
  "979652eb2bce370ed55ca111b3cf3dad175daf3fa77efd106c79ae016d694e03": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "Int4Array",
          "Int4Array"
        ]
      }
    },
    "query": "\n        update nft_direct_buy set\n            royalty_numerator = data.numerator,\n            royalty_denominator = data.denominator\n        from\n        (\n            select\n                unnest($1::varchar[]) as address,\n                unnest($2::integer[]) as numerator,\n                unnest($3::integer[]) as denominator\n        ) as data\n        where nft_direct_buy.address = data.address\n    "
  },
  "9e785ebcd70336f018a5c52a32816eb3c26a5dc439344d691ef9cdcef0584381": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "TimestampArray"
        ]
      }
    },
    "query": "\n        update nft set\n            owner = data.owner,\n            updated = data.time\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::varchar[]) as owner,\n                unnest($3::timestamp[]) as time\n        ) as data\n        where nft.address = data.address\n    "
  },
  "a76e7676bc83e0d7ce7a25db1772552bd60eb7376fd761ed748dc622046d2748": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray"
        ]
      }
    },
    "query": "\n        update nft set\n            burned = true,\n            owner = data.owner,\n            manager = data.manager\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::varchar[]) as owner,\n                unnest($3::varchar[]) as manager\n        ) as data\n        where nft.address = data.address\n    "
  },
  "a882440abab9dc417035fd58384e57291d634439c7ff3c16bce6bbb12f65e227": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Numeric",
          "Text"
        ]
      }
    },
    "query": "\n                update nft_price_history\n                set usd_price = $1\n                where source = $2\n            "
  },
  "aebb95861aadb7974c8e245ecde24963f241ff4a4343f67077f9e730021d71d2": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "NumericArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "TimestampArray",
          "Int8Array",
          "Int8Array"
        ]
      }
    },
    "query": "\n            insert into nft (\n                id,\n                address, \n                collection, \n                owner, \n                manager, \n                updated, \n                owner_update_lt, \n                manager_update_lt\n            )\n            select\n                unnest($1::numeric[]),\n                unnest($2::varchar[]),\n                unnest($3::varchar[]), \n                unnest($4::varchar[]), \n                unnest($5::varchar[]), \n                unnest($6::timestamp[]),\n                unnest($7::bigint[]),\n                unnest($8::bigint[]) \n            on conflict(address) do nothing\n        "
  },
  "b029d270ff46159f0ef351c16ff5ef23bcca247cc4d5338f7310e198c5eb170d": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "Int4Array",
          "Int4Array"
        ]
      }
    },
    "query": "\n        update nft_direct_sell set\n            royalty_numerator = data.numerator,\n            royalty_denominator = data.denominator\n        from\n        (\n            select\n                unnest($1::varchar[]) as address,\n                unnest($2::integer[]) as numerator,\n                unnest($3::integer[]) as denominator\n        ) as data\n        where nft_direct_sell.address = data.address\n    "
  },
  "b26379153f56804b980c102af4afc542ec8aeda91a7e11918c72a7690b4a67f5": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "NumericArray",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        ]
      }
    },
    "query": "\n        update nft_auction set\n            max_bid = data.max_bid,\n            status = data.status\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::numeric[]) as max_bid,\n                $3::auction_status as status\n        ) as data\n        where nft_auction.address = data.address\n    "
  },
  "b9942fe4032b78edb24dd783e45e637322c83dda7d95272b1809da24c6c07951": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": []
      }
    },
    "query": "call update_latest_collections(interval '30 minutes')"
  },
  "bfe196c120fa5ca8becfb04cc34cb2764fb8b8acdf63a4d79243480e69ac1ad5": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text",
          "TextArray"
        ]
      }
    },
    "query": "delete from nft_attributes where nft = $1 and trait_type != all($2);"
  },
  "c3794cf135adbfe8b3d8ff7ece307250e4ef4eb6ba110a9fa216f6148eb96173": {
    "describe": {
      "columns": [
        {
          "name": "safe_refresh_nft_verified_extended",
          "ordinal": 0,
          "type_info": "Void"
        }
      ],
      "nullable": [
        null
      ],
      "parameters": {
        "Left": [
          "Bool"
        ]
      }
    },
    "query": "select safe_refresh_nft_verified_extended($1)"
  },
  "cef46bb5677b537b3e7e62bbafd3e071c5e3a60a4a8c02b591a1f7599a632aa0": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "create",
                        "await_tokens",
                        "active",
                        "filled",
                        "cancelled",
                        "expired"
                      ]
                    },
                    "name": "direct_buy_state"
                  }
                }
              },
              "name": "_direct_buy_state"
            }
          },
          "TimestampArray",
          "TimestampArray",
          "Int8Array",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "VarcharArray",
          "TimestampArray",
          "TimestampArray"
        ]
      }
    },
    "query": "\n        update nft_direct_buy set\n            state = data.state,\n            nft = data.nft,\n            collection = data.collection,\n            price_token = data.price_token,\n            price = data.price,\n            buyer = data.buyer,\n            expired_at = data.expired_at,\n            finished_at = data.finished_at,\n            created = data.created,\n            updated = data.updated,\n            tx_lt = data.tx_lt\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::direct_buy_state[]) as state,\n                unnest($3::timestamp[]) as finished_at,\n                unnest($4::timestamp[]) as updated,\n                unnest($5::bigint[]) as tx_lt,\n                unnest($6::varchar[]) as nft,\n                unnest($7::varchar[]) as collection,\n                unnest($8::varchar[]) as price_token,\n                unnest($9::numeric[]) as price,\n                unnest($10::varchar[]) as buyer,\n                unnest($11::timestamp[]) as expired_at,\n                unnest($12::timestamp[]) as created\n        ) as data\n        where nft_direct_buy.address = data.address\n        "
  },
  "d1f7a3bffb14e4753aa27f201d388962bc987f866dfc0b895df4e5243c70a900": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "Int4Array",
          "Int4Array"
        ]
      }
    },
    "query": "\n        update nft_auction set\n            royalty_numerator = data.numerator,\n            royalty_denominator = data.denominator\n        from\n        (\n            select\n                unnest($1::varchar[]) as address,\n                unnest($2::integer[]) as numerator,\n                unnest($3::integer[]) as denominator\n        ) as data\n        where nft_auction.address = data.address\n    "
  },
  "d3296a1ab523134ef89964e8c7f17111e885c83145a88acd61050cd928ccea76": {
    "describe": {
      "columns": [
        {
          "name": "id",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "token_addr!",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "token_amount!",
          "ordinal": 2,
          "type_info": "Numeric"
        },
        {
          "name": "created_at!",
          "ordinal": 3,
          "type_info": "Timestamp"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Timestamp",
          "Timestamp",
          "Int8"
        ]
      }
    },
    "query": "\n                select\n                    source as id,\n                    price_token as \"token_addr!\",\n                    price as \"token_amount!\",\n                    ts as \"created_at!\"\n                from nft_price_history\n                where usd_price is null\n                and ts <= $1\n                and ts != $2\n                limit $3\n            "
  },
  "d34ae4d3dc423724a3ffd48b5d1e1ac9268aeb9c8f825bf305a0b3e4c45c915b": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": []
      }
    },
    "query": "refresh materialized view concurrently nft_events_verified_mv"
  },
  "df26d3c8e860957cafb5fb637bcad68056c8d7529d7f1c15cea58621a096bad9": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "TimestampArray"
        ]
      }
    },
    "query": "\n            insert into nft_collection (\n                address, \n                first_mint, \n                created, \n                updated            \n            )\n            select\n                unnest($1::varchar[]), \n                unnest($2::timestamp[]), \n                unnest($2::timestamp[]), \n                unnest($2::timestamp[])\n            on conflict(address) do nothing\n        "
  },
  "e7ab6800f3f0a8306c63bd3fea837c0a5f59c0efe571190ea5657f15ef2d7497": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "NumericArray",
          "TimestampArray",
          "Int8Array",
          "BoolArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray"
        ]
      }
    },
    "query": "\n            insert into nft_auction_bid (\n                auction,\n                buyer,\n                price,\n                next_bid_value, \n                created_at,\n                tx_lt,\n                declined,\n                nft,\n                nft_owner,\n                collection,\n                price_token\n            )\n            select\n                unnest($1::varchar[]),\n                unnest($2::varchar[]),\n                unnest($3::numeric[]),\n                unnest($4::numeric[]),\n                unnest($5::timestamp[]),\n                unnest($6::bigint[]),\n                unnest($7::boolean[]),\n                unnest($8::varchar[]),\n                unnest($9::varchar[]),\n                unnest($10::varchar[]),\n                unnest($11::varchar[])\n        "
  },
  "f5d588a0d28c4e9446b5ca4d7ea99ec0ad88afb1d7f48e71be86457eb9f9329a": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "is_l2r",
          "ordinal": 1,
          "type_info": "Bool"
        },
        {
          "name": "decimals",
          "ordinal": 2,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "everscale",
                  "venom"
                ]
              },
              "name": "bc_name"
            }
          }
        ]
      }
    },
    "query": "\n                select \n                    pair as address,\n                    is_l2r,\n                    decimals\n                from token_to_dex\n                where token = $1 and source = $2\n            "
  },
  "f63a96a1f3309b0c0dc83bb09e7fce182923bcd583bf4ee627a3f304189aa7f8": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "NumericArray",
          "TimestampArray",
          "TimestampArray",
          "Int8Array",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        ]
      }
    },
    "query": "\n        update nft_auction set\n            wallet_for_bids = data.wallet,\n            price_token = data.price_token,\n            start_price = data.start_price,\n            min_bid = data.min_bid,\n            created_at = data.created,\n            finished_at = data.finished,\n            tx_lt = data.tx_lt,\n            status = data.status\n        from (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::varchar[]) as wallet,\n                unnest($3::varchar[]) as price_token,\n                unnest($4::numeric[]) as start_price,\n                unnest($5::numeric[]) as min_bid,\n                unnest($6::timestamp[]) as created, \n                unnest($7::timestamp[]) as finished,\n                unnest($8::bigint[]) as tx_lt,\n                $9::auction_status as status\n        ) as data\n        where nft_auction.address = data.address\n        "
  },
  "fd0c8b3f904a27c32bfb8472daddbecfd08e4a85428aad49ea1e52a10ddc3ff1": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "create",
                        "await_nft",
                        "active",
                        "filled",
                        "cancelled",
                        "expired"
                      ]
                    },
                    "name": "direct_sell_state"
                  }
                }
              },
              "name": "_direct_sell_state"
            }
          },
          "TimestampArray",
          "TimestampArray",
          "Int8Array",
          "VarcharArray",
          "VarcharArray",
          "VarcharArray",
          "NumericArray",
          "VarcharArray",
          "TimestampArray",
          "TimestampArray"
        ]
      }
    },
    "query": "\n        update nft_direct_sell set\n            state = data.state,\n            nft = data.nft,\n            collection = data.collection,\n            price_token = data.price_token,\n            price = data.price,\n            seller = data.seller,\n            expired_at = data.expired_at,\n            finished_at = data.finished_at,\n            updated = data.updated,\n            created = data.created,\n            tx_lt = data.tx_lt\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::direct_sell_state[]) as state,\n                unnest($3::timestamp[]) as finished_at,\n                unnest($4::timestamp[]) as updated,\n                unnest($5::bigint[]) as tx_lt,\n                unnest($6::varchar[]) as nft,\n                unnest($7::varchar[]) as collection,\n                unnest($8::varchar[]) as price_token,\n                unnest($9::numeric[]) as price,\n                unnest($10::varchar[]) as seller,\n                unnest($11::timestamp[]) as expired_at,\n                unnest($12::timestamp[]) as created\n        ) as data\n        where nft_direct_sell.address = data.address\n        "
  },
  "fe6605371497cf9f59c6633361e1214b02d7eaa876274bdae69495cecaf96215": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "VarcharArray",
          "VarcharArray",
          "TimestampArray"
        ]
      }
    },
    "query": "\n        update nft set\n            manager = data.manager,\n            updated = data.time\n        from\n        (\n            select \n                unnest($1::varchar[]) as address,\n                unnest($2::varchar[]) as manager,\n                unnest($3::timestamp[]) as time\n        ) as data\n        where nft.address = data.address\n    "
  }
}