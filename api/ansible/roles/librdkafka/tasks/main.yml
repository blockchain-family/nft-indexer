---
- name: librdkafka | ensure build requirements are met
  apt:
    name:
      - bash
      - build-essential
      - cmake
      - zlib1g
      - zlib1g-dev
      - libssl-dev
    state: present

- name: librdkafka | check for existing installations
  find:
    path: /usr/local/lib
    pattern: "*rdkafka*"
    file_type: file
    recurse: yes
  register: librdkafka_result

- name: librdkafka | cleanup existing installation
  block: 
    - name:  librdkafka | remove static files
      file:
        name: "{{ item.path }}"
        state: absent
      loop: "{{ librdkafka_result.files }}"

    - name:  librdkafka | remove any existing apt version
      apt:
        name: librdkafka*
        state: absent
  when: librdkafka_cleanup_if_exists and librdkafka_result.matched > 1

- name: librdkafka | install library
  block:
    - name: librdkafka | download archive from GitHub
      get_url: 
        url: "https://github.com/edenhill/librdkafka/archive/{{ librdkafka_version }}.tar.gz"
        dest: "/tmp/librdkafka.tar.gz"
        checksum: "{{ librdkafka_checksum | default(omit) }}"
        force: "{{ librdkafka_cleanup_if_exists }}"
        mode: 0775

    - name: librdkafka | create destination folder
      file:
        path: /tmp/librdkafka-{{ librdkafka_version }}
        state: directory
        mode: 0775

    - name: librdkafka | extract .tar archive
      unarchive:
        src: /tmp/librdkafka.tar.gz
        dest: /tmp/librdkafka-{{ librdkafka_version }}
        extra_opts: [--strip-components=1]
        remote_src: yes
        mode: 0775

    - name: librdkafka | compile source code
      shell:
        cmd: |
          set -o pipefail
          ./configure {{ librdkafka_build_opts | default('') }} && \
          make -j{{ ansible_processor_cores }} && \
          make install
        chdir: /tmp/librdkafka-{{ librdkafka_version }}/
        warn: no
        executable: /bin/bash

    - name: librdkafka | cleanup tmp
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/librdkafka.tar.gz
        - "/tmp/librdkafka-{{ librdkafka_version }}"
  when: librdkafka_result.matched < 1 or librdkafka_cleanup_if_exists
